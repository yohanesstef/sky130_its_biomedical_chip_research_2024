
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)
Loaded SDC plugin

1. Executing Liberty frontend: /home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/home/nakanomiku/DigitalDesign/freq_psc/runs/RUN_2024-10-28_14-46-53/06-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: /home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v
Parsing SystemVerilog input from `/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v' to AST representation.
Storing AST representation for module `$abstract\freq_psc'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\freq_psc'.
Generating RTLIL representation for module `\freq_psc'.

4.1. Analyzing design hierarchy..
Top module:  \freq_psc

4.2. Analyzing design hierarchy..
Top module:  \freq_psc
Removing unused module `$abstract\freq_psc'.
Removed 1 unused modules.
Renaming module freq_psc to freq_psc.

5. Generating Graphviz representation of design.
Writing dot description to `/home/nakanomiku/DigitalDesign/freq_psc/runs/RUN_2024-10-28_14-46-53/06-yosys-synthesis/hierarchy.dot'.
Dumping module freq_psc to page 1.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \freq_psc

7.2. Analyzing design hierarchy..
Top module:  \freq_psc
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:15$1 in module freq_psc.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 0 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\freq_psc.$proc$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:15$1'.

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\freq_psc.$proc$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:15$1'.
     1/2: $0\out[0:0]
     2/2: $0\counter[31:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\freq_psc.\out' using process `\freq_psc.$proc$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:15$1'.
  created $adff cell `$procdff$12' with positive edge clock and positive level reset.
Creating register for signal `\freq_psc.\counter' using process `\freq_psc.$proc$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:15$1'.
  created $adff cell `$procdff$15' with positive edge clock and positive level reset.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\freq_psc.$proc$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:15$1'.
Removing empty process `freq_psc.$proc$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:15$1'.
Cleaned up 1 empty switch.

19. Executing CHECK pass (checking for obvious problems).
Checking module freq_psc...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.
<suppressed ~3 debug messages>

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \freq_psc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \freq_psc.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \freq_psc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \freq_psc.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

26.9. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell freq_psc.$add$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:20$2 ($add).
Removed top 31 bits (of 32) from port B of cell freq_psc.$sub$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:21$3 ($sub).
Removed top 1 bits (of 32) from port B of cell freq_psc.$lt$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:24$6 ($lt).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module freq_psc:
  creating $macc model for $add$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:20$2 ($add).
  creating $macc model for $sub$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:21$3 ($sub).
  creating $alu model for $macc $sub$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:21$3.
  creating $alu model for $macc $add$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:20$2.
  creating $alu model for $ge$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:21$4 ($ge): new $alu
  creating $alu model for $lt$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:24$6 ($lt): new $alu
  creating $alu cell for $lt$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:24$6: $auto$alumacc.cc:485:replace_alu$18
  creating $alu cell for $ge$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:21$4: $auto$alumacc.cc:485:replace_alu$29
  creating $alu cell for $add$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:20$2: $auto$alumacc.cc:485:replace_alu$42
  creating $alu cell for $sub$/home/nakanomiku/DigitalDesign/freq_psc/freq_psc.v:21$3: $auto$alumacc.cc:485:replace_alu$45
  created 4 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.
<suppressed ~1 debug messages>

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \freq_psc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \freq_psc.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

32.9. Rerunning OPT passes. (Maybe there is more to do..)

32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \freq_psc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \freq_psc.
Performed a total of 0 changes.

32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

32.13. Executing OPT_DFF pass (perform DFF optimizations).

32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..

32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

32.16. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.
<suppressed ~1 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \freq_psc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \freq_psc.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

37.10. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/c26m31cifv9fyym8p72j6cj5ilqgnh2z-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/c26m31cifv9fyym8p72j6cj5ilqgnh2z-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$c04af8dbf0e5d1d69bbccb2c7bd8a93fc9ef54dc\_90_alu for cells of type $alu.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$e891e6b399cf52748460a311fafe476815d24bd7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~902 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.
<suppressed ~389 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
<suppressed ~255 debug messages>
Removed a total of 85 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..
Removed 188 unused cells and 346 unused wires.
<suppressed ~189 debug messages>

39.5. Finished fast OPT passes.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..

40.5. Finished fast OPT passes.

41. Executing ABC pass (technology mapping using ABC).

41.1. Extracting gate netlist of module `\freq_psc' to `<abc-temp-dir>/input.blif'..
Extracted 686 gates and 751 wires to a netlist network with 64 inputs and 33 outputs.

41.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

41.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       21
ABC RESULTS:              XNOR cells:       26
ABC RESULTS:             ORNOT cells:       32
ABC RESULTS:                OR cells:       57
ABC RESULTS:               XOR cells:       99
ABC RESULTS:               NOR cells:       39
ABC RESULTS:               AND cells:        8
ABC RESULTS:              NAND cells:       45
ABC RESULTS:            ANDNOT cells:      249
ABC RESULTS:        internal signals:      654
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       33
Removing temp directory.

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..
Removed 0 unused cells and 364 unused wires.
<suppressed ~1 debug messages>

42.5. Finished fast OPT passes.

43. Executing HIERARCHY pass (managing design hierarchy).

43.1. Analyzing design hierarchy..
Top module:  \freq_psc

43.2. Analyzing design hierarchy..
Top module:  \freq_psc
Removed 0 unused modules.

44. Executing CHECK pass (checking for obvious problems).
Checking module freq_psc...
Found and reported 0 problems.

45. Printing statistics.

=== freq_psc ===

   Number of wires:                543
   Number of wire bits:            636
   Number of public wires:           5
   Number of public wire bits:      67
   Number of ports:                  4
   Number of port bits:             35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                602
     $_ANDNOT_                     249
     $_AND_                          8
     $_DFF_PP0_                     33
     $_NAND_                        45
     $_NOR_                         34
     $_NOT_                         21
     $_ORNOT_                       32
     $_OR_                          55
     $_XNOR_                        26
     $_XOR_                         99

46. Generating Graphviz representation of design.
Writing dot description to `/home/nakanomiku/DigitalDesign/freq_psc/runs/RUN_2024-10-28_14-46-53/06-yosys-synthesis/primitive_techmap.dot'.
Dumping module freq_psc to page 1.

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \freq_psc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \freq_psc.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\freq_psc'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module freq_psc.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/nakanomiku/DigitalDesign/freq_psc/runs/RUN_2024-10-28_14-46-53/tmp/a9c6d8d81666476692c845434b53b285.lib ",
   "modules": {
      "\\freq_psc": {
         "num_wires":         543,
         "num_wire_bits":     636,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 67,
         "num_ports":         4,
         "num_port_bits":     35,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         602,
         "num_cells_by_type": {
            "$_ANDNOT_": 249,
            "$_AND_": 8,
            "$_DFF_PP0_": 33,
            "$_NAND_": 45,
            "$_NOR_": 34,
            "$_NOT_": 21,
            "$_ORNOT_": 32,
            "$_OR_": 55,
            "$_XNOR_": 26,
            "$_XOR_": 99
         }
      }
   },
      "design": {
         "num_wires":         543,
         "num_wire_bits":     636,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 67,
         "num_ports":         4,
         "num_port_bits":     35,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         602,
         "num_cells_by_type": {
            "$_ANDNOT_": 249,
            "$_AND_": 8,
            "$_DFF_PP0_": 33,
            "$_NAND_": 45,
            "$_NOR_": 34,
            "$_NOT_": 21,
            "$_ORNOT_": 32,
            "$_OR_": 55,
            "$_XNOR_": 26,
            "$_XOR_": 99
         }
      }
}

49. Printing statistics.

=== freq_psc ===

   Number of wires:                543
   Number of wire bits:            636
   Number of public wires:           5
   Number of public wire bits:      67
   Number of ports:                  4
   Number of port bits:             35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                602
     $_ANDNOT_                     249
     $_AND_                          8
     $_DFF_PP0_                     33
     $_NAND_                        45
     $_NOR_                         34
     $_NOT_                         21
     $_ORNOT_                       32
     $_OR_                          55
     $_XNOR_                        26
     $_XOR_                         99

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_DFF_PP0_ is unknown!

[INFO] Applying tri-state buffer mapping from '/home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\freq_psc':
  mapped 33 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/nakanomiku/DigitalDesign/freq_psc/runs/RUN_2024-10-28_14-46-53/tmp/a9c6d8d81666476692c845434b53b285.lib ",
   "modules": {
      "\\freq_psc": {
         "num_wires":         576,
         "num_wire_bits":     669,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 67,
         "num_ports":         4,
         "num_port_bits":     35,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         635,
         "area":              867.081600,
         "num_cells_by_type": {
            "$_ANDNOT_": 249,
            "$_AND_": 8,
            "$_NAND_": 45,
            "$_NOR_": 34,
            "$_NOT_": 54,
            "$_ORNOT_": 32,
            "$_OR_": 55,
            "$_XNOR_": 26,
            "$_XOR_": 99,
            "sky130_fd_sc_hd__dfrtp_2": 33
         }
      }
   },
      "design": {
         "num_wires":         576,
         "num_wire_bits":     669,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 67,
         "num_ports":         4,
         "num_port_bits":     35,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         635,
         "area":              867.081600,
         "num_cells_by_type": {
            "$_ANDNOT_": 249,
            "$_AND_": 8,
            "$_NAND_": 45,
            "$_NOR_": 34,
            "$_NOT_": 54,
            "$_ORNOT_": 32,
            "$_OR_": 55,
            "$_XNOR_": 26,
            "$_XOR_": 99,
            "sky130_fd_sc_hd__dfrtp_2": 33
         }
      }
}

55. Printing statistics.

=== freq_psc ===

   Number of wires:                576
   Number of wire bits:            669
   Number of public wires:           5
   Number of public wire bits:      67
   Number of ports:                  4
   Number of port bits:             35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                635
     $_ANDNOT_                     249
     $_AND_                          8
     $_NAND_                        45
     $_NOR_                         34
     $_NOT_                         54
     $_ORNOT_                       32
     $_OR_                          55
     $_XNOR_                        26
     $_XOR_                         99
     sky130_fd_sc_hd__dfrtp_2       33

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!

   Chip area for module '\freq_psc': 867.081600
     of which used for sequential elements: 867.081600 (100.00%)

[INFO] Using generated ABC script '/home/nakanomiku/DigitalDesign/freq_psc/runs/RUN_2024-10-28_14-46-53/06-yosys-synthesis/AREA_0.abc'â€¦

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\freq_psc' to `/tmp/yosys-abc-UB0fIz/input.blif'..
Extracted 602 gates and 667 wires to a netlist network with 65 inputs and 66 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-UB0fIz/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-UB0fIz/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-UB0fIz/input.blif 
ABC: + read_lib -w /home/nakanomiku/DigitalDesign/freq_psc/runs/RUN_2024-10-28_14-46-53/tmp/a9c6d8d81666476692c845434b53b285.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/nakanomiku/DigitalDesign/freq_psc/runs/RUN_2024-10-28_14-46-53/tmp/a9c6d8d81666476692c845434b53b285.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/nakanomiku/DigitalDesign/freq_psc/runs/RUN_2024-10-28_14-46-53/06-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /home/nakanomiku/DigitalDesign/freq_psc/runs/RUN_2024-10-28_14-46-53/06-yosys-synthesis/AREA_0.abc 
ABC: Error: The network is combinational.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =    386 ( 17.1 %)   Cap = 10.8 ff (  2.9 %)   Area =     3106.73 ( 81.3 %)   Delay =  5873.54 ps  ( 13.0 %)               
ABC: Path  0 --       1 : 0    4 pi                       A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =   9.3 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     164 : 4    4 sky130_fd_sc_hd__or4_2   A =   8.76  Df = 702.0 -578.8 ps  S = 137.6 ps  Cin =  1.5 ff  Cout =  12.3 ff  Cmax = 310.4 ff  G =  777  
ABC: Path  2 --     166 : 4    6 sky130_fd_sc_hd__or4_2   A =   8.76  Df =1349.2-1057.2 ps  S = 158.1 ps  Cin =  1.5 ff  Cout =  19.2 ff  Cmax = 310.4 ff  G = 1224  
ABC: Path  3 --     170 : 4    7 sky130_fd_sc_hd__or4_2   A =   8.76  Df =2077.5-1595.8 ps  S = 161.3 ps  Cin =  1.5 ff  Cout =  21.0 ff  Cmax = 310.4 ff  G = 1323  
ABC: Path  4 --     174 : 4    4 sky130_fd_sc_hd__or4_2   A =   8.76  Df =2739.7-2113.3 ps  S = 117.1 ps  Cin =  1.5 ff  Cout =   7.2 ff  Cmax = 310.4 ff  G =  451  
ABC: Path  5 --     235 : 3    2 sky130_fd_sc_hd__or3_2   A =   7.51  Df =3184.9-2445.2 ps  S =  89.7 ps  Cin =  1.5 ff  Cout =   6.5 ff  Cmax = 310.4 ff  G =  413  
ABC: Path  6 --     241 : 2    2 sky130_fd_sc_hd__and2_2  A =   7.51  Df =3379.8 -302.4 ps  S =  58.3 ps  Cin =  1.5 ff  Cout =   7.3 ff  Cmax = 303.0 ff  G =  466  
ABC: Path  7 --     244 : 4    2 sky130_fd_sc_hd__a22o_2  A =  10.01  Df =3629.3 -415.1 ps  S =  40.1 ps  Cin =  2.3 ff  Cout =   3.1 ff  Cmax = 301.2 ff  G =  127  
ABC: Path  8 --     306 : 4    1 sky130_fd_sc_hd__or4b_2  A =  10.01  Df =4234.7 -629.7 ps  S =  89.9 ps  Cin =  1.5 ff  Cout =   1.4 ff  Cmax = 265.5 ff  G =   91  
ABC: Path  9 --     307 : 4    1 sky130_fd_sc_hd__or4_2   A =   8.76  Df =4761.0 -772.0 ps  S =  89.8 ps  Cin =  1.5 ff  Cout =   1.4 ff  Cmax = 310.4 ff  G =   89  
ABC: Path 10 --     308 : 4    1 sky130_fd_sc_hd__or4_2   A =   8.76  Df =5297.6 -737.6 ps  S =  95.8 ps  Cin =  1.5 ff  Cout =   2.4 ff  Cmax = 310.4 ff  G =  156  
ABC: Path 11 --     310 : 4   32 sky130_fd_sc_hd__o211a_2 A =  10.01  Df =5546.4 -418.5 ps  S = 299.2 ps  Cin =  2.4 ff  Cout =  50.9 ff  Cmax = 268.3 ff  G = 2093  
ABC: Path 12 --     316 : 3    1 sky130_fd_sc_hd__and3b_2 A =  10.01  Df =5873.5 -399.4 ps  S = 182.8 ps  Cin =  1.5 ff  Cout =  33.4 ff  Cmax = 309.5 ff  G = 2264  
ABC: Start-point = pi0 (\psc [0]).  End-point = po2 ($0\counter[31:0] [2]).
ABC: netlist                       : i/o =   65/   66  lat =    0  nd =   386  edge =   1033  area =3107.07  delay =12.00  lev = 12
ABC: + write_blif /tmp/yosys-abc-UB0fIz/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       22
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       66
ABC RESULTS:        internal signals:      536
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       66
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \freq_psc..
Removed 0 unused cells and 667 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module freq_psc...
Found and reported 0 problems.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/nakanomiku/DigitalDesign/freq_psc/runs/RUN_2024-10-28_14-46-53/tmp/a9c6d8d81666476692c845434b53b285.lib ",
   "modules": {
      "\\freq_psc": {
         "num_wires":         422,
         "num_wire_bits":     453,
         "num_pub_wires":     36,
         "num_pub_wire_bits": 67,
         "num_ports":         4,
         "num_port_bits":     35,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         419,
         "area":              3973.811200,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111o_2": 2,
            "sky130_fd_sc_hd__a211o_2": 2,
            "sky130_fd_sc_hd__a21bo_2": 2,
            "sky130_fd_sc_hd__a21o_2": 15,
            "sky130_fd_sc_hd__a21oi_2": 9,
            "sky130_fd_sc_hd__a221o_2": 4,
            "sky130_fd_sc_hd__a22o_2": 14,
            "sky130_fd_sc_hd__a22oi_2": 1,
            "sky130_fd_sc_hd__a2bb2o_2": 3,
            "sky130_fd_sc_hd__a31o_2": 7,
            "sky130_fd_sc_hd__a31oi_2": 2,
            "sky130_fd_sc_hd__and2_2": 22,
            "sky130_fd_sc_hd__and2b_2": 5,
            "sky130_fd_sc_hd__and3_2": 24,
            "sky130_fd_sc_hd__and3b_2": 25,
            "sky130_fd_sc_hd__and4_2": 10,
            "sky130_fd_sc_hd__and4b_2": 2,
            "sky130_fd_sc_hd__and4bb_2": 1,
            "sky130_fd_sc_hd__dfrtp_2": 33,
            "sky130_fd_sc_hd__inv_2": 66,
            "sky130_fd_sc_hd__nand2_2": 21,
            "sky130_fd_sc_hd__nand2b_2": 6,
            "sky130_fd_sc_hd__nand4_2": 1,
            "sky130_fd_sc_hd__nor2_2": 17,
            "sky130_fd_sc_hd__nor3_2": 1,
            "sky130_fd_sc_hd__nor4_2": 2,
            "sky130_fd_sc_hd__o211a_2": 3,
            "sky130_fd_sc_hd__o211ai_2": 2,
            "sky130_fd_sc_hd__o21a_2": 5,
            "sky130_fd_sc_hd__o21ai_2": 6,
            "sky130_fd_sc_hd__o21ba_2": 1,
            "sky130_fd_sc_hd__o21bai_2": 1,
            "sky130_fd_sc_hd__o221a_2": 10,
            "sky130_fd_sc_hd__o22a_2": 9,
            "sky130_fd_sc_hd__o22ai_2": 1,
            "sky130_fd_sc_hd__o2bb2a_2": 3,
            "sky130_fd_sc_hd__o31a_2": 3,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__o32a_2": 2,
            "sky130_fd_sc_hd__o41a_2": 1,
            "sky130_fd_sc_hd__or2_2": 32,
            "sky130_fd_sc_hd__or3_2": 9,
            "sky130_fd_sc_hd__or3b_2": 4,
            "sky130_fd_sc_hd__or4_2": 13,
            "sky130_fd_sc_hd__or4b_2": 3,
            "sky130_fd_sc_hd__or4bb_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 10,
            "sky130_fd_sc_hd__xor2_2": 2
         }
      }
   },
      "design": {
         "num_wires":         422,
         "num_wire_bits":     453,
         "num_pub_wires":     36,
         "num_pub_wire_bits": 67,
         "num_ports":         4,
         "num_port_bits":     35,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         419,
         "area":              3973.811200,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111o_2": 2,
            "sky130_fd_sc_hd__a211o_2": 2,
            "sky130_fd_sc_hd__a21bo_2": 2,
            "sky130_fd_sc_hd__a21o_2": 15,
            "sky130_fd_sc_hd__a21oi_2": 9,
            "sky130_fd_sc_hd__a221o_2": 4,
            "sky130_fd_sc_hd__a22o_2": 14,
            "sky130_fd_sc_hd__a22oi_2": 1,
            "sky130_fd_sc_hd__a2bb2o_2": 3,
            "sky130_fd_sc_hd__a31o_2": 7,
            "sky130_fd_sc_hd__a31oi_2": 2,
            "sky130_fd_sc_hd__and2_2": 22,
            "sky130_fd_sc_hd__and2b_2": 5,
            "sky130_fd_sc_hd__and3_2": 24,
            "sky130_fd_sc_hd__and3b_2": 25,
            "sky130_fd_sc_hd__and4_2": 10,
            "sky130_fd_sc_hd__and4b_2": 2,
            "sky130_fd_sc_hd__and4bb_2": 1,
            "sky130_fd_sc_hd__dfrtp_2": 33,
            "sky130_fd_sc_hd__inv_2": 66,
            "sky130_fd_sc_hd__nand2_2": 21,
            "sky130_fd_sc_hd__nand2b_2": 6,
            "sky130_fd_sc_hd__nand4_2": 1,
            "sky130_fd_sc_hd__nor2_2": 17,
            "sky130_fd_sc_hd__nor3_2": 1,
            "sky130_fd_sc_hd__nor4_2": 2,
            "sky130_fd_sc_hd__o211a_2": 3,
            "sky130_fd_sc_hd__o211ai_2": 2,
            "sky130_fd_sc_hd__o21a_2": 5,
            "sky130_fd_sc_hd__o21ai_2": 6,
            "sky130_fd_sc_hd__o21ba_2": 1,
            "sky130_fd_sc_hd__o21bai_2": 1,
            "sky130_fd_sc_hd__o221a_2": 10,
            "sky130_fd_sc_hd__o22a_2": 9,
            "sky130_fd_sc_hd__o22ai_2": 1,
            "sky130_fd_sc_hd__o2bb2a_2": 3,
            "sky130_fd_sc_hd__o31a_2": 3,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__o32a_2": 2,
            "sky130_fd_sc_hd__o41a_2": 1,
            "sky130_fd_sc_hd__or2_2": 32,
            "sky130_fd_sc_hd__or3_2": 9,
            "sky130_fd_sc_hd__or3b_2": 4,
            "sky130_fd_sc_hd__or4_2": 13,
            "sky130_fd_sc_hd__or4b_2": 3,
            "sky130_fd_sc_hd__or4bb_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 10,
            "sky130_fd_sc_hd__xor2_2": 2
         }
      }
}

63. Printing statistics.

=== freq_psc ===

   Number of wires:                422
   Number of wire bits:            453
   Number of public wires:          36
   Number of public wire bits:      67
   Number of ports:                  4
   Number of port bits:             35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                419
     sky130_fd_sc_hd__a2111o_2       2
     sky130_fd_sc_hd__a211o_2        2
     sky130_fd_sc_hd__a21bo_2        2
     sky130_fd_sc_hd__a21o_2        15
     sky130_fd_sc_hd__a21oi_2        9
     sky130_fd_sc_hd__a221o_2        4
     sky130_fd_sc_hd__a22o_2        14
     sky130_fd_sc_hd__a22oi_2        1
     sky130_fd_sc_hd__a2bb2o_2       3
     sky130_fd_sc_hd__a31o_2         7
     sky130_fd_sc_hd__a31oi_2        2
     sky130_fd_sc_hd__and2_2        22
     sky130_fd_sc_hd__and2b_2        5
     sky130_fd_sc_hd__and3_2        24
     sky130_fd_sc_hd__and3b_2       25
     sky130_fd_sc_hd__and4_2        10
     sky130_fd_sc_hd__and4b_2        2
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__dfrtp_2       33
     sky130_fd_sc_hd__inv_2         66
     sky130_fd_sc_hd__nand2_2       21
     sky130_fd_sc_hd__nand2b_2       6
     sky130_fd_sc_hd__nand4_2        1
     sky130_fd_sc_hd__nor2_2        17
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__nor4_2         2
     sky130_fd_sc_hd__o211a_2        3
     sky130_fd_sc_hd__o211ai_2       2
     sky130_fd_sc_hd__o21a_2         5
     sky130_fd_sc_hd__o21ai_2        6
     sky130_fd_sc_hd__o21ba_2        1
     sky130_fd_sc_hd__o21bai_2       1
     sky130_fd_sc_hd__o221a_2       10
     sky130_fd_sc_hd__o22a_2         9
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2a_2       3
     sky130_fd_sc_hd__o31a_2         3
     sky130_fd_sc_hd__o31ai_2        1
     sky130_fd_sc_hd__o32a_2         2
     sky130_fd_sc_hd__o41a_2         1
     sky130_fd_sc_hd__or2_2         32
     sky130_fd_sc_hd__or3_2          9
     sky130_fd_sc_hd__or3b_2         4
     sky130_fd_sc_hd__or4_2         13
     sky130_fd_sc_hd__or4b_2         3
     sky130_fd_sc_hd__or4bb_2        1
     sky130_fd_sc_hd__xnor2_2       10
     sky130_fd_sc_hd__xor2_2         2

   Chip area for module '\freq_psc': 3973.811200
     of which used for sequential elements: 867.081600 (21.82%)

64. Executing Verilog backend.
Dumping module `\freq_psc'.

65. Executing JSON backend.
